[{"/Users/kimdo/Documents/Projects/CheesePlanner.io/client/src/index.js":"1","/Users/kimdo/Documents/Projects/CheesePlanner.io/client/src/App.js":"2","/Users/kimdo/Documents/Projects/CheesePlanner.io/client/src/components/edit.js":"3","/Users/kimdo/Documents/Projects/CheesePlanner.io/client/src/components/recordList.js":"4","/Users/kimdo/Documents/Projects/CheesePlanner.io/client/src/components/generateDay.js":"5","/Users/kimdo/Documents/Projects/CheesePlanner.io/client/src/components/generateWeek.js":"6","/Users/kimdo/Documents/Projects/CheesePlanner.io/client/src/components/generateMonth.js":"7","/Users/kimdo/Documents/Projects/CheesePlanner.io/client/src/components/create.js":"8","/Users/kimdo/Documents/Projects/CheesePlanner.io/client/src/components/navbar.js":"9","/Users/kimdo/Documents/Projects/CheesePlanner.io/client/src/components/generateSchedule.js":"10"},{"size":317,"mtime":1702333145971,"results":"11","hashOfConfig":"12"},{"size":1028,"mtime":1702333145969,"results":"13","hashOfConfig":"12"},{"size":6119,"mtime":1702333145970,"results":"14","hashOfConfig":"12"},{"size":2366,"mtime":1702333145970,"results":"15","hashOfConfig":"12"},{"size":2623,"mtime":1702333145970,"results":"16","hashOfConfig":"12"},{"size":3081,"mtime":1702333145970,"results":"17","hashOfConfig":"12"},{"size":1145,"mtime":1702333145970,"results":"18","hashOfConfig":"12"},{"size":6162,"mtime":1702333145969,"results":"19","hashOfConfig":"12"},{"size":1470,"mtime":1702333145970,"results":"20","hashOfConfig":"12"},{"size":792,"mtime":1702333145970,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"2448gg",{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},"/Users/kimdo/Documents/Projects/CheesePlanner.io/client/src/index.js",[],[],"/Users/kimdo/Documents/Projects/CheesePlanner.io/client/src/App.js",[],[],"/Users/kimdo/Documents/Projects/CheesePlanner.io/client/src/components/edit.js",[],[],"/Users/kimdo/Documents/Projects/CheesePlanner.io/client/src/components/recordList.js",[],[],"/Users/kimdo/Documents/Projects/CheesePlanner.io/client/src/components/generateDay.js",["55"],[],"import React, { useEffect, useState } from \"react\";\nimport { spacedRepetitionDate } from \"./generateSchedule\";\nimport \"./TechFeelingStyles.css\"; // Import your CSS file\n\nfunction Timer() {\n  const [time, setTime] = useState(0);\n  const [timerOn, setTimeOn] = useState(false);\n\n  useEffect(() => {\n    let interval = null;\n    if (timerOn) {\n      interval = setInterval(() => {\n        setTime((prevTime) => prevTime + 1000);\n      }, 1000);\n    } else if (!timerOn) {\n      clearInterval(interval);\n    }\n    return () => clearInterval(interval);\n  }, [timerOn]);\n\n  let message = \"Timer is stopped\";\n  if (timerOn) {\n    if (time >= 0 && time < 1500000) {\n      message = \"Study Time\";\n    } else if (time >= 1500000 && time < 1800000) {\n      message = \"Please Take a 5 Minute Break\";\n    } else if (time >= 1800000) {\n      message = \"Resetting\";\n      setTime(0);\n      setTimeOn(false);\n    }\n  }\n\n  const minutes = Math.floor(time / 60000);\n  const seconds = Math.floor((time % 60000) / 1000);\n\n  return (\n    <div className=\"tech-feeling-timer\">\n      <h1 className=\"timer-header\">\n        Timer: {seconds < 10 ? `${minutes}:0${seconds}` : `${minutes}:${seconds}`}\n      </h1>\n      <p className=\"timer-message\">{message}</p>\n      <div className=\"timer-buttons\">\n        <button className=\"timer-button start\" onClick={() => setTimeOn(true)}>Start</button>\n        <button className=\"timer-button stop\" onClick={() => setTimeOn(false)}>Stop</button>\n        <button className=\"timer-button reset\" onClick={() => setTime(0)}>Reset</button>\n      </div>\n    </div>\n  );\n}\n\nconst TODO = (props) => (\n  <tr>\n    <td>{props.record.topic}</td>\n    <Timer />\n  </tr>\n);\n\nexport default function TodoList() {\n  const [records, setRecords] = useState([]);\n\n  useEffect(() => {\n    async function getRecords() {\n      const response = await fetch(`http://localhost:3000/record/`);\n      if (!response.ok) {\n        const message = `An error occurred: ${response.statusText}`;\n        window.alert(message);\n        return;\n      }\n      const records = await response.json();\n      setRecords(records);\n    }\n    getRecords();\n  }, []);\n\n  function showSchedule() {\n    return records.map((record) => (\n      <TODO record={record} key={record._id} />\n    ));\n  }\n\n  return (\n    <div className=\"tech-feeling-todo-list\">\n      <h3 className=\"todo-list-header\">Your TODOs</h3>\n      <table className=\"tech-feeling-table table-striped\">\n        <thead>\n          <tr>\n            <th>Topic</th>\n            <th>Time</th>\n          </tr>\n        </thead>\n        <tbody>{showSchedule()}</tbody>\n      </table>\n    </div>\n  );\n}\n","/Users/kimdo/Documents/Projects/CheesePlanner.io/client/src/components/generateWeek.js",["56"],[],"import React, { useState, useEffect } from \"react\";\nimport './WeeklySchedule.css'; // Import a CSS file for styling\n\n\nconst weekdays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'];\n\n// today's date\nconst today = new Date();\n// check db's dates\n// if db has schedule for today, display it\n// else, display default schedule\n\n\n\n\nexport default function WeeklySchedule() {\n    const initialSchedule = {\n        Monday: [],\n        Tuesday: [],\n        Wednesday: [],\n        Thursday: [],\n        Friday: [],\n    };\n    \n    const [records, setRecords] = useState([]);\n    useEffect(() => {\n        async function getRecords() {\n            const response = await fetch(`http://localhost:3000/record/`);\n            if (!response.ok) {\n                const message = `An error occurred: ${response.statusText}`;\n                window.alert(message);\n                return;\n            }\n            const records = await response.json();\n            setRecords(records);\n        }\n        getRecords();\n        return;\n\n    }, [records.length]);\n\n\n\n    const [schedule, setSchedule] = useState(initialSchedule);\n\n\n    const handleTaskChange = (day, index, task) => {\n        const updatedSchedule = { ...schedule };\n        updatedSchedule[day][index] = task;\n        setSchedule(updatedSchedule);\n    };\n\n\n    return (\n        <div className=\"weekly-schedule-container\">\n            <h1 className=\"weekly-schedule-header\" >Weekly Schedule</h1>\n            <table className=\"weekly-schedule\">\n                <thead>\n                    <tr>\n                        <th></th>\n                        {weekdays.map((day) => (\n                            <th key={day}>{day}</th>\n                        ))}\n                    </tr>\n                </thead>\n                <tbody>\n                    {Array.from({ length: 9 }).map((_, index) => (\n                        <tr key={index}>\n                            <td className={index % 2 === 0 ? 'task-cell' : 'break-cell'}>\n                                {index % 2 === 0 ? 'Tasks' : 'Break'}\n                            </td>\n                            {weekdays.map((day) => (\n                                <td key={day}>\n                                    <TaskInput\n                                        day={day}\n                                        index={index}\n                                        task={schedule[day][index] || ''}\n                                        onTaskChange={handleTaskChange}\n                                    />\n                                </td>\n                            ))}\n                        </tr>\n                    ))}\n                </tbody>\n            </table>\n        </div>\n    );\n}\n\n\nfunction TaskInput({ day, index, task, onTaskChange }) {\n    const handleChange = (e) => {\n        onTaskChange(day, index, e.target.value);\n    };\n\n\n    return (\n        <input\n            className=\"task-input\"\n            type=\"text\"\n            value={task}\n            onChange={handleChange}\n            placeholder=\"Enter task\"\n        />\n    );\n}\n","/Users/kimdo/Documents/Projects/CheesePlanner.io/client/src/components/generateMonth.js",[],[],"/Users/kimdo/Documents/Projects/CheesePlanner.io/client/src/components/create.js",[],[],"/Users/kimdo/Documents/Projects/CheesePlanner.io/client/src/components/navbar.js",[],[],"/Users/kimdo/Documents/Projects/CheesePlanner.io/client/src/components/generateSchedule.js",["57","58","59","60","61"],[],"import React, { useEffect, useState } from \"react\";\nimport addDays from \"date-fns/addDays\";\nexport function spacedRepetitionDate(record){\n\n    var duedate = new Date(record.deadline);\n    var today = new Date();\n    var remaining = duedate - today;\n    //2n^3+3n^2+n-6r=0 find n when r = remaining\n    var n = 0;\n    var r = remaining;\n    for (var i = 0; i < 1000; i++){\n        if (2*Math.pow(n,3)+3*Math.pow(n,2)+n-6*r >= 0){\n            break;\n        }\n        n++;\n    }\n    //get all squared number from 1 to n\n    var squared = [];\n    for (var i = 1; i <= n; i++){\n        squared.push(Math.pow(i,2)-1);\n    }\n    //get all dates from today + 1 to today + n\n    var dates = [];\n    for (var i = 1; i <= n; i++){\n        dates.push(addDays(squared[i], i));\n    }\n    return dates;\n}\n\n",{"ruleId":"62","severity":1,"message":"63","line":2,"column":10,"nodeType":"64","messageId":"65","endLine":2,"endColumn":30},{"ruleId":"62","severity":1,"message":"66","line":8,"column":7,"nodeType":"64","messageId":"65","endLine":8,"endColumn":12},{"ruleId":"62","severity":1,"message":"67","line":1,"column":8,"nodeType":"64","messageId":"65","endLine":1,"endColumn":13},{"ruleId":"62","severity":1,"message":"68","line":1,"column":17,"nodeType":"64","messageId":"65","endLine":1,"endColumn":26},{"ruleId":"62","severity":1,"message":"69","line":1,"column":28,"nodeType":"64","messageId":"65","endLine":1,"endColumn":36},{"ruleId":"70","severity":1,"message":"71","line":19,"column":14,"nodeType":"64","messageId":"72","endLine":19,"endColumn":15},{"ruleId":"70","severity":1,"message":"71","line":24,"column":14,"nodeType":"64","messageId":"72","endLine":24,"endColumn":15},"no-unused-vars","'spacedRepetitionDate' is defined but never used.","Identifier","unusedVar","'today' is assigned a value but never used.","'React' is defined but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","no-redeclare","'i' is already defined.","redeclared"]